# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
---
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: spark
  region: us-east-1
  version: "1.17"

availabilityZones: ["us-east-1a", "us-east-1b","us-east-1c"]

vpc:
# If you wish to use an existing VPC, please provide the subnet ID, change the availability zones above accordingly
#  subnets:
#    private:
#      us-east-1a: { id: <YOUR_SUBNET_ID> }
#      us-east-1b: { id: <YOUR_SUBNET_ID> }
#      us-east-1c: { id: <YOUR_SUBNET_ID> }
  nat:
    gateway: HighlyAvailable # other options: Disable, Single (default)
  clusterEndpoints:
    publicAccess: true
    privateAccess: true

cloudWatch:
  clusterLogging:
    # enable specific types of cluster control plane logs
    enableTypes: ["all"]
    # all supported types: "api", "audit", "authenticator", "controllerManager", "scheduler"
    # supported special values: "*" and "all"

iam:
  withOIDC: true
  serviceAccounts:
    - metadata:
        name: cluster-autoscaler
        namespace: kube-system
        labels: {aws-usage: "cluster-ops"}
      attachPolicy: # inline policy can be defined along with `attachPolicyARNs`
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeLaunchConfigurations"
              - "autoscaling:DescribeTags"
              - "autoscaling:SetDesiredCapacity"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
              - "ec2:DescribeLaunchTemplateVersions"
            Resource: '*'

fargateProfiles:
  - name: spark
    selectors:
      # All workloads in the "spark" Kubernetes namespace matching the following
      # label selectors will be scheduled onto Fargate:
      - namespace: spark
        labels:
          nodegroup: fargate

managedNodeGroups:
  - name: tooling
    instanceType: t3.xlarge
    minSize: 2
    maxSize: 4
    desiredCapacity: 2
    volumeSize: 20
    labels:
      lifecycle: od
      nodegroup: tooling
      noderole: tooling
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true
        autoScaler: true
        cloudWatch: true
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

nodeGroups:
  - name: spark-arm-bottlerocket-spot-nvme-1b
    amiFamily: Bottlerocket
    bottlerocket:
      enableAdminContainer: true
    availabilityZones: ["us-east-1b"]
    minSize: 0
    maxSize: 4
    privateNetworking: true
    instancesDistribution:
      instanceTypes: ["r6gd.xlarge"]
      onDemandBaseCapacity: 0
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: capacity-optimized
    labels:
      arch: arm
      os: bottlerocket
      lifecycle: spot
      disk: nvme
      nodegroup: spark-arm-bottlerocket-spot-nvme-1b
      noderole: spark
    tags:
      k8s.io/cluster-autoscaler/node-template/label/nodegroup: spark-arm-bottlerocket-spot-nvme-1b
      k8s.io/cluster-autoscaler/node-template/label/arch: arm
      k8s.io/cluster-autoscaler/node-template/label/os: bottlerocket
      k8s.io/cluster-autoscaler/node-template/label/noderole: spark
      k8s.io/cluster-autoscaler/node-template/label/disk: nvme
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: spot
      k8s.io/cluster-autoscaler/node-template/taint/spot: "true:NoSchedule"
      k8s.io/cluster-autoscaler/spark: owned
      k8s.io/cluster-autoscaler/enabled: "true"
    taints:
      spot: "true:NoSchedule"
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true
        autoScaler: true
        cloudWatch: true
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  - name: spark-arm-bottlerocket-spot-nodisk-1c
    amiFamily: Bottlerocket
    bottlerocket:
      enableAdminContainer: true
    availabilityZones: ["us-east-1c"]
    minSize: 0
    maxSize: 4
    privateNetworking: true
    instancesDistribution:
      instanceTypes: ["r6g.xlarge","r6gd.xlarge"]
      onDemandBaseCapacity: 0
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: capacity-optimized
    labels:
      arch: arm
      os: bottlerocket
      lifecycle: spot
      disk: none
      nodegroup: spark-arm-bottlerocket-spot-nodisk-1c
      noderole: spark
    tags:
      k8s.io/cluster-autoscaler/node-template/label/nodegroup: spark-arm-bottlerocket-spot-nodisk-1c
      k8s.io/cluster-autoscaler/node-template/label/arch: arm
      k8s.io/cluster-autoscaler/node-template/label/os: bottlerocket
      k8s.io/cluster-autoscaler/node-template/label/noderole: spark
      k8s.io/cluster-autoscaler/node-template/label/disk: none
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: spot
      k8s.io/cluster-autoscaler/node-template/taint/spot: "true:NoSchedule"
      k8s.io/cluster-autoscaler/spark: owned
      k8s.io/cluster-autoscaler/enabled: "true"
    taints:
      spot: "true:NoSchedule"
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true
        autoScaler: true
        cloudWatch: true
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  - name: spark-bottlerocket-spot-nvme-1a
    amiFamily: Bottlerocket
    bottlerocket:
      enableAdminContainer: true
    availabilityZones: ["us-east-1c"]
    minSize: 0
    maxSize: 4
    privateNetworking: true
    instancesDistribution:
      instanceTypes: ["r5.xlarge", "r5a.xlarge", "r4.xlarge","r5d.xlarge"]
      onDemandBaseCapacity: 0
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: capacity-optimized
    labels:
      arch: intel
      os: bottlerocket
      lifecycle: spot
      disk: none
      nodegroup: spark-bottlerocket-spot-nvme-1a
      noderole: spark
    tags:
      k8s.io/cluster-autoscaler/node-template/label/nodegroup: spark-bottlerocket-spot-nvme-1a
      k8s.io/cluster-autoscaler/node-template/label/arch: intel
      k8s.io/cluster-autoscaler/node-template/label/os: bottlerocket
      k8s.io/cluster-autoscaler/node-template/label/noderole: spark
      k8s.io/cluster-autoscaler/node-template/label/disk: none
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: spot
      k8s.io/cluster-autoscaler/node-template/taint/spot: "true:NoSchedule"
      k8s.io/cluster-autoscaler/spark: owned
      k8s.io/cluster-autoscaler/enabled: "true"
    taints:
      spot: "true:NoSchedule"
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true
        autoScaler: true
        cloudWatch: true
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  - name: spark-bottlerocket-spot-nodisk-1c
    amiFamily: Bottlerocket
    bottlerocket:
      enableAdminContainer: true
    availabilityZones: ["us-east-1c"]
    minSize: 0
    maxSize: 4
    privateNetworking: true
    instancesDistribution:
      instanceTypes: ["r5.xlarge", "r5a.xlarge", "r4.xlarge","r5d.xlarge"]
      onDemandBaseCapacity: 0
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: capacity-optimized
    labels:
      arch: intel
      os: bottlerocket
      lifecycle: spot
      disk: none
      nodegroup: spark-bottlerocket-spot-nodisk-1c
      noderole: spark
    tags:
      k8s.io/cluster-autoscaler/node-template/label/nodegroup: spark-bottlerocket-spot-nodisk-1c
      k8s.io/cluster-autoscaler/node-template/label/arch: intel
      k8s.io/cluster-autoscaler/node-template/label/os: bottlerocket
      k8s.io/cluster-autoscaler/node-template/label/noderole: spark
      k8s.io/cluster-autoscaler/node-template/label/disk: none
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: spot
      k8s.io/cluster-autoscaler/node-template/taint/spot: "true:NoSchedule"
      k8s.io/cluster-autoscaler/spark: owned
      k8s.io/cluster-autoscaler/enabled: "true"
    taints:
      spot: "true:NoSchedule"
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true
        autoScaler: true
        cloudWatch: true
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  - name: spark-spot-nodisk-1a
    availabilityZones: ["us-east-1a"]
    minSize: 0
    maxSize: 4
    privateNetworking: true
    instancesDistribution:
      instanceTypes: ["r5.xlarge", "r5a.xlarge", "r4.xlarge","r5d.xlarge"]
      onDemandBaseCapacity: 0
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: capacity-optimized
    labels:
      arch: intel
      os: linux
      lifecycle: spot
      disk: none
      nodegroup: spark-spot-nodisk-1a
      noderole: spark
    tags:
      k8s.io/cluster-autoscaler/node-template/label/nodegroup: spark-spot-nodisk-1a
      k8s.io/cluster-autoscaler/node-template/label/arch: intel
      k8s.io/cluster-autoscaler/node-template/label/os: linux
      k8s.io/cluster-autoscaler/node-template/label/noderole: spark
      k8s.io/cluster-autoscaler/node-template/label/disk: none
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: spot
      k8s.io/cluster-autoscaler/node-template/taint/spot: "true:NoSchedule"
      k8s.io/cluster-autoscaler/spark: owned
      k8s.io/cluster-autoscaler/enabled: "true"
    taints:
      spot: "true:NoSchedule"
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true
        autoScaler: true
        cloudWatch: true
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  - name: spark-4x-spot-nodisk-1a
    availabilityZones: ["us-east-1a"]
    minSize: 0
    maxSize: 4
    privateNetworking: true
    instancesDistribution:
      instanceTypes: ["r5.4xlarge", "r5a.4xlarge", "r4.4xlarge","r5d.4xlarge"]
      onDemandBaseCapacity: 0
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: capacity-optimized
    labels:
      arch: intel
      os: linux
      lifecycle: spot
      disk: none
      nodegroup: spark-4x-spot-nodisk-1a
      noderole: spark
    tags:
      k8s.io/cluster-autoscaler/node-template/label/nodegroup: spark-4x-spot-nodisk-1a
      k8s.io/cluster-autoscaler/node-template/label/arch: intel
      k8s.io/cluster-autoscaler/node-template/label/os: linux
      k8s.io/cluster-autoscaler/node-template/label/noderole: spark
      k8s.io/cluster-autoscaler/node-template/label/disk: none
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: spot
      k8s.io/cluster-autoscaler/node-template/taint/spot: "true:NoSchedule"
      k8s.io/cluster-autoscaler/spark: owned
      k8s.io/cluster-autoscaler/enabled: "true"
    taints:
      spot: "true:NoSchedule"
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true
        autoScaler: true
        cloudWatch: true
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  - name: spark-od-nodisk-1b
    availabilityZones: ["us-east-1b"]
    minSize: 0
    maxSize: 4
    privateNetworking: true
    instanceType: "r5.xlarge"
    labels:
      arch: intel
      os: linux
      lifecycle: od
      disk: none
      nodegroup: spark-od-nodisk-1b
      noderole: spark
    tags:
      k8s.io/cluster-autoscaler/node-template/label/nodegroup: spark-od-nodisk-1b
      k8s.io/cluster-autoscaler/node-template/label/arch: intel
      k8s.io/cluster-autoscaler/node-template/label/os: linux
      k8s.io/cluster-autoscaler/node-template/label/noderole: spark
      k8s.io/cluster-autoscaler/node-template/label/disk: none
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: od
      k8s.io/cluster-autoscaler/spark: owned
      k8s.io/cluster-autoscaler/enabled: "true"
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true
        autoScaler: true
        cloudWatch: true
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  - name: spark-spot-nvme-1c
    availabilityZones: ["us-east-1c"]
    instancesDistribution:
      instanceTypes: ["r5d.xlarge", "r5ad.xlarge", "r5dn.xlarge"]
      onDemandBaseCapacity: 0
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: capacity-optimized
    ssh:
      allow: true
      publicKeyName: spark-eks
    minSize: 0
    maxSize: 4
    privateNetworking: true
    labels:
      arch: intel
      os: linux
      lifecycle: spot
      disk: nvme
      nodegroup: spark-spot-nvme-1c
      noderole: spark
    tags:
      k8s.io/cluster-autoscaler/node-template/label/nodegroup: spark-spot-nvme-1c
      k8s.io/cluster-autoscaler/node-template/label/arch: intel
      k8s.io/cluster-autoscaler/node-template/label/os: linux
      k8s.io/cluster-autoscaler/node-template/label/noderole: spark
      k8s.io/cluster-autoscaler/node-template/label/disk: nvme
      k8s.io/cluster-autoscaler/node-template/label/lifecylce: spot
      k8s.io/cluster-autoscaler/spark: owned
      k8s.io/cluster-autoscaler/enabled: "true"
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true
        autoScaler: true
        cloudWatch: true
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  - name: spark-4x-spot-nvme-1b
    availabilityZones: ["us-east-1b"]
    instancesDistribution:
      instanceTypes: ["r5d.4xlarge", "r5ad.4xlarge", "r5dn.4xlarge"]
      onDemandBaseCapacity: 0
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: capacity-optimized
    minSize: 0
    maxSize: 4
    privateNetworking: true
    labels:
      arch: intel
      os: linux
      lifecycle: spot
      disk: nvme
      nodegroup: spark-4x-spot-nvme-1b
      noderole: spark
    tags:
      k8s.io/cluster-autoscaler/node-template/label/nodegroup: spark-4x-spot-nvme-1b
      k8s.io/cluster-autoscaler/node-template/label/arch: intel
      k8s.io/cluster-autoscaler/node-template/label/os: linux
      k8s.io/cluster-autoscaler/node-template/label/noderole: spark
      k8s.io/cluster-autoscaler/node-template/label/disk: nvme
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: spot
      k8s.io/cluster-autoscaler/spark: owned
      k8s.io/cluster-autoscaler/enabled: "true"
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true
        autoScaler: true
        cloudWatch: true
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess